# Module 3, Critical Thinking

import random

random_list = [random.randint(-50000, 50000) for _ in range(500)]
print("Random list of 500 integers:")
for num in random_list:
  print(num, end = "")


# Selection Sort

import time
import random

random_list = [random.randint(-50000, 50000) for _ in range(500)]
print("Random list of 500 integers:")
for num in random_list:
  print(num, end = "")

def selection_sort(arr):
  n = len(arr)
  for i in range(n):
    min_idx = i
    for j in range(i + 1, n):
      if arr[j] < arr[min_idx]:
        min_idx = j
    arr[i], arr[min_idx] = arr[min_idx], arr[i]
  return arr

sorted_list_selection = selection_sort(random_list)

start_time = time.time()
selection_sort(random_list)
end_time = time.time()
execution_time = end_time - start_time

print("\nSorted list using Selection Sort.")
for num in random_list:
  print(num, end = "")
print(f"\nExecution time for Selection Sort: {execution_time} seconds")


# Insertion Sort

import time
import random

random_list = [random.randint(-50000, 50000) for _ in range(500)]
print("Random list of 500 integers:")
for num in random_list:
  print(num, end = "")

def insertion_sort(arr):
  for i in range(1, len(arr)):
    key = arr[i]
    j = i - 1
    while j >= 0 and arr[j] > key:
      arr[j + 1] = arr[j]
      j -= 1
    arr[j + 1] = key
  return arr

sorted_list_insertion = insertion_sort(random_list)

start_time = time.time()
insertion_sort(random_list)
end_time = time.time()
execution_time = end_time - start_time

print("\nSorted list using Insertion Sort.")
for num in random_list:
  print(num, end = "")
print(f"\nExecution time for Insertion Sort: {execution_time} seconds")


# Merge Sort

import time
import random

random_list = [random.randint(-50000, 50000) for _ in range(500)]
print("Random list of 500 integers:")
for num in random_list:
  print(num, end = "")

def merge_sort(arr):
  if len(arr) <= 1:
    return arr
  mid = len(arr) // 2
  left = arr[:mid]
  right = arr[mid:]
  left = merge_sort(left)
  right = merge_sort(right)
  return merge(left, right)

def merge(left, right):
  merged = []
  while left and right:
    if left[0] <= right[0]:
      merged.append(left[0])
      left = left[1:]
    else:
      merged.append(right[0])
      right = right[1:]
  merged.extend(left)
  merged.extend(right)
  return merged

sorted_list_merge = merge_sort(random_list)

start_time = time.time()
merge_sort(random_list)
end_time = time.time()
execution_time = end_time - start_time

print("\nSorted list using Merge Sort.")
for num in random_list:
  print(num, end = "")
print(f"\nExecution time for Merge Sort: {execution_time} seconds")



# Bubble Sort

import time
import random

random_list = [random.randint(-50000, 50000) for _ in range(500)]
print("Random list of 500 integers:")
for num in random_list:
  print(num, end = "")

def bubble_sort(arr):
  n = len(arr)
  for i in range(n):
    for j in range(0, n - i - 1):
      if arr[j] > arr[j + 1]:
        arr[j], arr[j + 1] = arr[j + 1], arr[j]
  return arr

sorted_list_bubble = bubble_sort(random_list)

start_time = time.time()
bubble_sort(random_list)
end_time = time.time()
execution_time = end_time - start_time

print("\nSorted list using Bubble Sort.")
for num in random_list:
  print(num, end = "")
print(f"\nExecution time for Bubble Sort: {execution_time} seconds")



# Quick Sort

import time
import random

random_list = [random.randint(-50000, 50000) for _ in range(500)]
print("Random list of 500 integers:")
for num in random_list:
  print(num, end = "")

def quick_sort(arr):
  if len(arr) <= 1:
    return arr
  pivot = arr[len(arr) // 2]
  left = [x for x in arr if x < pivot]
  middle = [x for x in arr if x == pivot]
  right = [x for x in arr if x > pivot]
  return quick_sort(left) + middle + quick_sort(right)

sorted_list_quick = quick_sort(random_list)

start_time = time.time()
quick_sort(random_list)
end_time = time.time()
execution_time = end_time - start_time

print("\nSorted list using Quick Sort.")
for num in random_list:
  print(num, end = "")
print(f"\nExecution time for Quick Sort: {execution_time} seconds")
