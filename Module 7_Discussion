# Module 7 Discussion

# Dijkstra's

import heapq
import sys


def social_network(graph, start):
    distances = {node: sys.maxsize for node in graph}
    distances[start] = 0
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        if current_distance > distances[current_node]:
            continue

        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances


graph = {
    "A": {"B": 1, "C": 3},
    "B": {"D": 2, "E": 4},
    "C": {"D": 1, "F": 2},
    "D": {},
    "E": {},
    "F": {}
}

start = "A"
shortest_distance = social_network(graph, start)

print(f"Shortest Distance From Node '{start}': {shortest_distance}")




# Bellman-Ford's

def telecom(graph, start):
    distances = {node: float("infinity") for node in graph}
    distances[start] = 0

    for _ in range(len(graph) - 1):
        for current_node in graph:
            for neighbor, weight in graph[current_node].items():
                if distances[current_node] + weight < distances[neighbor]:
                    distances[neighbor] = distances[current_node] + weight

    for current_node in graph:
        for neighbor, weight in graph[current_node].items():
            if distances[current_node] + weight < distances[neighbor]:
                return None

    return distances


if __name__ == "__main__":
    graph = {
        "A": {"B": -1, "C": 4},
        "B": {"A": -1, "C": 2, "D": 5},
        "C": {"A": 4, "B": 2, "D": 1},
        "D": {"B": 5, "C": 1}
    }
    
    start_node = "A"
    distances = telecom(graph, start_node)
    print(f"Shortest Distance From Node {start_node}:")
    print(distances)
